// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using blazingdocs.core.Model;

namespace blazingdocs.Repositories.Migrations
{
    [DbContext(typeof(DmsDbContext))]
    partial class DmsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CategoryObject", b =>
                {
                    b.Property<int>("CategoriesCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ObjectsObjectId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesCategoryId", "ObjectsObjectId");

                    b.HasIndex("ObjectsObjectId");

                    b.ToTable("CategoryObject");
                });

            modelBuilder.Entity("blazingdocs.core.Model.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("blazingdocs.core.Model.File", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ObjectId")
                        .HasColumnType("int");

                    b.HasKey("FileId");

                    b.HasIndex("ObjectId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("blazingdocs.core.Model.Object", b =>
                {
                    b.Property<int>("ObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ObjectTypeId")
                        .HasColumnType("int");

                    b.HasKey("ObjectId");

                    b.HasIndex("ObjectTypeId");

                    b.ToTable("Objects");
                });

            modelBuilder.Entity("blazingdocs.core.Model.ObjectType", b =>
                {
                    b.Property<int>("ObjectTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("ObjectTypeId");

                    b.HasIndex("ParentId");

                    b.ToTable("ObjectTypes");
                });

            modelBuilder.Entity("blazingdocs.core.Model.PhysicalObject", b =>
                {
                    b.Property<int>("PhysicalObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IndexInContainer")
                        .HasColumnType("int");

                    b.Property<int>("ObjectId")
                        .HasColumnType("int");

                    b.Property<int>("PhysicalObjectContainerId")
                        .HasColumnType("int");

                    b.HasKey("PhysicalObjectId");

                    b.HasIndex("ObjectId")
                        .IsUnique();

                    b.HasIndex("PhysicalObjectContainerId");

                    b.ToTable("PhysicalObjects");
                });

            modelBuilder.Entity("blazingdocs.core.Model.PhysicalObjectContainer", b =>
                {
                    b.Property<int>("PhysicalObjectContainerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("PhysicalObjectContainerId");

                    b.HasIndex("ParentId");

                    b.ToTable("PhysicalObjectContainers");
                });

            modelBuilder.Entity("blazingdocs.core.Model.Property", b =>
                {
                    b.Property<int>("PropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ObjectId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyFieldId")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyValueId")
                        .HasColumnType("int");

                    b.HasKey("PropertyId");

                    b.HasIndex("ObjectId");

                    b.HasIndex("PropertyFieldId");

                    b.HasIndex("PropertyValueId")
                        .IsUnique()
                        .HasFilter("[PropertyValueId] IS NOT NULL");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("blazingdocs.core.Model.PropertyField", b =>
                {
                    b.Property<int>("PropertyFieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ObjectTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyType")
                        .HasColumnType("int");

                    b.HasKey("PropertyFieldId");

                    b.HasIndex("ObjectTypeId");

                    b.ToTable("PropertyFields");
                });

            modelBuilder.Entity("blazingdocs.core.Model.PropertyValue", b =>
                {
                    b.Property<int>("PropertyValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateTimeValue")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateValue")
                        .HasColumnType("datetime2");

                    b.Property<float?>("FloatValue")
                        .HasColumnType("real");

                    b.Property<decimal?>("MoneyValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("NumberValue")
                        .HasColumnType("int");

                    b.Property<string>("TextValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PropertyValueId");

                    b.ToTable("PropertyValues");
                });

            modelBuilder.Entity("CategoryObject", b =>
                {
                    b.HasOne("blazingdocs.core.Model.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("blazingdocs.core.Model.Object", null)
                        .WithMany()
                        .HasForeignKey("ObjectsObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("blazingdocs.core.Model.File", b =>
                {
                    b.HasOne("blazingdocs.core.Model.Object", "Object")
                        .WithMany("Files")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Object");
                });

            modelBuilder.Entity("blazingdocs.core.Model.Object", b =>
                {
                    b.HasOne("blazingdocs.core.Model.ObjectType", "ObjectType")
                        .WithMany("Objects")
                        .HasForeignKey("ObjectTypeId");

                    b.Navigation("ObjectType");
                });

            modelBuilder.Entity("blazingdocs.core.Model.ObjectType", b =>
                {
                    b.HasOne("blazingdocs.core.Model.ObjectType", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("blazingdocs.core.Model.PhysicalObject", b =>
                {
                    b.HasOne("blazingdocs.core.Model.Object", "Object")
                        .WithOne("PhysicalObject")
                        .HasForeignKey("blazingdocs.core.Model.PhysicalObject", "ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("blazingdocs.core.Model.PhysicalObjectContainer", "PhysicalObjectContainer")
                        .WithMany()
                        .HasForeignKey("PhysicalObjectContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Object");

                    b.Navigation("PhysicalObjectContainer");
                });

            modelBuilder.Entity("blazingdocs.core.Model.PhysicalObjectContainer", b =>
                {
                    b.HasOne("blazingdocs.core.Model.PhysicalObjectContainer", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("blazingdocs.core.Model.Property", b =>
                {
                    b.HasOne("blazingdocs.core.Model.Object", "Object")
                        .WithMany("Properties")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("blazingdocs.core.Model.PropertyField", "PropertyField")
                        .WithMany()
                        .HasForeignKey("PropertyFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("blazingdocs.core.Model.PropertyValue", "PropertyValue")
                        .WithOne("Property")
                        .HasForeignKey("blazingdocs.core.Model.Property", "PropertyValueId");

                    b.Navigation("Object");

                    b.Navigation("PropertyField");

                    b.Navigation("PropertyValue");
                });

            modelBuilder.Entity("blazingdocs.core.Model.PropertyField", b =>
                {
                    b.HasOne("blazingdocs.core.Model.ObjectType", null)
                        .WithMany("PropertyFields")
                        .HasForeignKey("ObjectTypeId");
                });

            modelBuilder.Entity("blazingdocs.core.Model.Object", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("PhysicalObject")
                        .IsRequired();

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("blazingdocs.core.Model.ObjectType", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Objects");

                    b.Navigation("PropertyFields");
                });

            modelBuilder.Entity("blazingdocs.core.Model.PhysicalObjectContainer", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("blazingdocs.core.Model.PropertyValue", b =>
                {
                    b.Navigation("Property")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
