// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using blazingdocs.core.Model;

namespace blazingdocs.core.Migrations
{
    [DbContext(typeof(DmsDbContext))]
    [Migration("20190715195055_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("blazingdocs.core.Model.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("blazingdocs.core.Model.CategoryDocument", b =>
                {
                    b.Property<int>("CategoryId");

                    b.Property<int>("DocumentId");

                    b.HasKey("CategoryId", "DocumentId");

                    b.HasIndex("DocumentId");

                    b.ToTable("CategoryDocument");
                });

            modelBuilder.Entity("blazingdocs.core.Model.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<int?>("DocumentTypeId");

                    b.Property<DateTime>("Modified");

                    b.HasKey("DocumentId");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("blazingdocs.core.Model.DocumentType", b =>
                {
                    b.Property<int>("DocumentTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int?>("ParentDocumentTypeId");

                    b.HasKey("DocumentTypeId");

                    b.HasIndex("ParentDocumentTypeId");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("blazingdocs.core.Model.File", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int>("DocumentId");

                    b.Property<string>("FullPath");

                    b.HasKey("FileId");

                    b.HasIndex("DocumentId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("blazingdocs.core.Model.PhysicalDocument", b =>
                {
                    b.Property<int>("PhysicalDocumentId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DocumentId");

                    b.Property<int>("IndexInContainer");

                    b.Property<int>("NumberOfPages");

                    b.Property<int>("PhysicalDocumentContainerId");

                    b.HasKey("PhysicalDocumentId");

                    b.HasIndex("DocumentId")
                        .IsUnique();

                    b.HasIndex("PhysicalDocumentContainerId");

                    b.ToTable("PhysicalDocuments");
                });

            modelBuilder.Entity("blazingdocs.core.Model.PhysicalDocumentContainer", b =>
                {
                    b.Property<int>("PhysicalDocumentContainerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("NumberOfElements");

                    b.Property<int?>("ParentPhysicalDocumentContainerId");

                    b.HasKey("PhysicalDocumentContainerId");

                    b.HasIndex("ParentPhysicalDocumentContainerId");

                    b.ToTable("PhysicalDocumentContainers");
                });

            modelBuilder.Entity("blazingdocs.core.Model.Property", b =>
                {
                    b.Property<int>("PropertyId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DocumentId");

                    b.Property<int>("PropertyFieldId");

                    b.HasKey("PropertyId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("PropertyFieldId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("blazingdocs.core.Model.PropertyField", b =>
                {
                    b.Property<int>("PropertyFieldId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DocumentTypeId");

                    b.Property<string>("Name");

                    b.Property<int>("PropertyType");

                    b.HasKey("PropertyFieldId");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("PropertyFields");
                });

            modelBuilder.Entity("blazingdocs.core.Model.PropertyValue", b =>
                {
                    b.Property<int>("PropertyValueId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateTimeValue");

                    b.Property<DateTime?>("DateValue");

                    b.Property<float?>("FloatValue");

                    b.Property<decimal?>("MoneyValue");

                    b.Property<int?>("NumberValue");

                    b.Property<int>("PropertyId");

                    b.Property<string>("TextValue");

                    b.HasKey("PropertyValueId");

                    b.HasIndex("PropertyId")
                        .IsUnique();

                    b.ToTable("PropertyValues");
                });

            modelBuilder.Entity("blazingdocs.core.Model.CategoryDocument", b =>
                {
                    b.HasOne("blazingdocs.core.Model.Category", "Category")
                        .WithMany("CategoryDocuments")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("blazingdocs.core.Model.Document", "Document")
                        .WithMany("CategoryDocuments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("blazingdocs.core.Model.Document", b =>
                {
                    b.HasOne("blazingdocs.core.Model.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId");
                });

            modelBuilder.Entity("blazingdocs.core.Model.DocumentType", b =>
                {
                    b.HasOne("blazingdocs.core.Model.DocumentType", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentDocumentTypeId");
                });

            modelBuilder.Entity("blazingdocs.core.Model.File", b =>
                {
                    b.HasOne("blazingdocs.core.Model.Document", "Document")
                        .WithMany("Files")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("blazingdocs.core.Model.PhysicalDocument", b =>
                {
                    b.HasOne("blazingdocs.core.Model.Document", "Document")
                        .WithOne("PhysicalDocument")
                        .HasForeignKey("blazingdocs.core.Model.PhysicalDocument", "DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("blazingdocs.core.Model.PhysicalDocumentContainer", "PhysicalDocumentContainer")
                        .WithMany()
                        .HasForeignKey("PhysicalDocumentContainerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("blazingdocs.core.Model.PhysicalDocumentContainer", b =>
                {
                    b.HasOne("blazingdocs.core.Model.PhysicalDocumentContainer", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentPhysicalDocumentContainerId");
                });

            modelBuilder.Entity("blazingdocs.core.Model.Property", b =>
                {
                    b.HasOne("blazingdocs.core.Model.Document", "Document")
                        .WithMany("Properties")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("blazingdocs.core.Model.PropertyField", "PropertyField")
                        .WithMany()
                        .HasForeignKey("PropertyFieldId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("blazingdocs.core.Model.PropertyField", b =>
                {
                    b.HasOne("blazingdocs.core.Model.DocumentType")
                        .WithMany("PropertyFields")
                        .HasForeignKey("DocumentTypeId");
                });

            modelBuilder.Entity("blazingdocs.core.Model.PropertyValue", b =>
                {
                    b.HasOne("blazingdocs.core.Model.Property", "Property")
                        .WithOne("PropertyValue")
                        .HasForeignKey("blazingdocs.core.Model.PropertyValue", "PropertyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
